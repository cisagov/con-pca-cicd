# For this workflow, github environments are being utilized.
# For more information on how environments work, view this
# documentation - https://docs.github.com/en/actions/reference/environments
name: COOL Deploy
on:
  # On pull request, it just gets tags for an image
  # and outputs the terraform plan. Nothing is deployed
  # into any environment.
  pull_request:
    branches: [develop]

  # On push to develop, a deployment is kicked off to the
  # staging environment.
  push:
    branches: [develop]

  # Will deploy to production if event is cool_production,
  # otherwise deploy to staging environment.
  repository_dispatch:
    types: [deploy, cool_staging, cool_production]

# Sets environment variables to be used by every job.
env:
  REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.COOL_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.COOL_AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: ~0.13.0

jobs:
  # Set Environment
  setenv:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      # Output what is triggering the workflow to run
      - name: Output metadata
        run: |
          echo ${{ github.event_name }}
          echo ${{ github.event.action }}

      # Sets staging environment if it's not meant for production
      - name: Set staging environment
        run: echo "environment=staging" >> $GITHUB_ENV
        if: ${{ github.event.action != 'cool_production' }}

      # Otherwise, set production environment
      - name: Set production environment
        run: echo "environment=production" >> $GITHUB_ENV
        if: ${{ github.event.action == 'cool_production' }}

      # Output selected environment
      - name: Show environment
        run: echo "$environment"

      # Set job output
      - name: Set outputs
        id: env
        run: echo ::set-output name=environment::$environment

  # Build and push image repositories
  build:
    runs-on: ubuntu-latest
    needs: [setenv]

    # Set environment and environment variables
    env:
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
    environment:
      name: ${{ needs.setenv.outputs.environment }}

    # Run this workflow against all defined repos
    # For more info on using a matrix in a job, go to
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      fail-fast: false
      matrix:
        repo: [con-pca-api, con-pca-web, con-pca-gophish]
    steps:
      # Checkout repo to build against
      - uses: actions/checkout@v2
        with:
          repository: cisagov/${{ matrix.repo }}

      # Set needed job vars
      - name: Set vars
        run: |
          echo "assume_role=arn:aws:iam::$ACCOUNT_ID:role/ProvisionAccount" >> $GITHUB_ENV
          echo "ecr_uri=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com" >> $GITHUB_ENV

      # Store tag in an environment variable
      - name: Get Tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Print out tag
      - name: Display Tag
        run: echo "$tag"

      # Uploads the tag to an artifact to be used in the terraform job
      # Can't define as an output, as it's not really supported when
      # using the matrix strategy.
      - name: Create Tag Artifact
        run: echo "$tag" > tag.txt
      - name: Upload Tag Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.repo }}
          path: tag.txt

      # Some of the following steps will only run if not a pull request -
      # (Build, Tag, Push)
      # The others run so we can be more proactive about catching issues
      # in pull requests before they are an issue on deployment.
      - name: Set TO_BUILD
        run: echo "build=true" >> $GITHUB_ENV
        if: ${{ github.event.client_payload.trigger == matrix.repo || github.event.action == 'cool_production'}}

      # Build image if not a pull request
      - name: Build
        run: docker build -t ${{ matrix.repo }}:$tag .
        if: ${{ env.build == 'true' }}

      # Tag image if not a pull request
      - name: Tag
        run: docker tag ${{ matrix.repo }}:$tag $ecr_uri/${{ matrix.repo }}:$tag
        if: ${{ env.build == 'true' }}

      # Assume role to push images to ECR
      - name: Assume provision account role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 1200
          role-to-assume: ${{ env.assume_role }}
          role-skip-session-tagging: true

      # Verify the role has been assumed
      - name: Confirm Assumed Role
        run: aws sts get-caller-identity

      # Login to ECR
      - name: Login to ECR
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ecr_uri

      # Push to ECR if not a pull request
      - name: Push to ECR
        run: docker push $ecr_uri/${{ matrix.repo }}:$tag
        if: ${{ env.build == 'true' }}

  # Runs terraform
  deploy:
    runs-on: ubuntu-latest
    needs: [setenv, build]

    # Run in the cool directory where terraform is defined
    defaults:
      run:
        working-directory: cool

    # Set environment and environment variables
    env:
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      ENVIRONMENT: ${{ needs.setenv.outputs.environment }}
      SES_ARN: ${{ secrets.SES_ROLE_ARN }}
      SHARED_SERVICES_ACCOUNT_ID: ${{ secrets.SHARED_SERVICES_ACCOUNT_ID }}
    environment:
      name: ${{ needs.setenv.outputs.environment }}

    steps:
      # Checkout con-pca-cicd repo for running terraform
      - uses: actions/checkout@v2

      # Install and setup terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Downloads all artifacts to an artifacts directory
      - name: Download All Tag Files
        uses: actions/download-artifact@v2
        with:
          path: cool/artifacts

      # Gets tags for images and stores in environment variables
      - name: Store tags in environment variables
        run: |
          echo "web_tag=$(cat artifacts/con-pca-web/tag.txt)" >> $GITHUB_ENV
          echo "api_tag=$(cat artifacts/con-pca-api/tag.txt)" >> $GITHUB_ENV
          echo "gophish_tag=$(cat artifacts/con-pca-gophish/tag.txt)" >> $GITHUB_ENV

      # Verifies terraform is installed properly
      - name: Verify Terraform version
        run: terraform --version

      # Initializes terraform
      - name: Terraform init
        run: terraform init -input=false

      # Selects terraform workspace according to environment
      - name: Terraform workspace
        run: |
          terraform workspace select $ENVIRONMENT
          terraform workspace show
      # Validates terraform
      - name: Validate terraform
        run: terraform validate

      # Sometimes this just needs to be run a second time.
      - name: Terraform init 2
        run: terraform init -input=false

      # Output plan
      # This occurs in all steps as the plan output
      # is a lot more descriptive than the apply output
      # when it is set to auto approve.
      - name: Terraform plan
        run: |
          terraform plan \
            -input=false \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="api_image_tag=$api_tag" \
            -var="web_image_tag=$web_tag" \
            -var="gophish_image_tag=$gophish_tag" \
            -var="account_id=$ACCOUNT_ID" \
            -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID" \
            -var="ses_assume_role_arn=$SES_ARN" \
            -var="deployed_date=$(date)"

      # Applies terraform if it's not a pull request.
      - name: Terraform apply
        run: |
          terraform apply \
            -input=false \
            -auto-approve \
            -var-file ./vars/$ENVIRONMENT.tfvars \
            -var="api_image_tag=$api_tag" \
            -var="web_image_tag=$web_tag" \
            -var="gophish_image_tag=$gophish_tag" \
            -var="account_id=$ACCOUNT_ID" \
            -var="shared_services_account_id=$SHARED_SERVICES_ACCOUNT_ID" \
            -var="ses_assume_role_arn=$SES_ARN" \
            -var="deployed_date=$(date)"
        if: ${{ github.event_name != 'pull_request' }}
